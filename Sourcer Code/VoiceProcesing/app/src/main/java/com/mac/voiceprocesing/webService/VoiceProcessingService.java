package com.mac.voiceprocesing.webService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 2/22/2015 6:07:17 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

public class VoiceProcessingService {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;
    
    public VoiceProcessingService(){}
    
    public VoiceProcessingService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public VoiceProcessingService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public VoiceProcessingService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void UpLoadAudioNoteAsync(String audioNoteJson) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpLoadAudioNoteAsync(audioNoteJson, null);
    }
    
    public void UpLoadAudioNoteAsync(final String audioNoteJson,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpLoadAudioNote(audioNoteJson, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpLoadAudioNote", result);
                }
            }
        }.execute();
    }
    
    public void UpLoadAudioNote(String audioNoteJson){
        UpLoadAudioNote(audioNoteJson, null);
    }
    
    public void UpLoadAudioNote(String audioNoteJson,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpLoadAudioNote");
        soapReq.addProperty("audioNoteJson",audioNoteJson);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UpLoadAudioNote", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UpLoadAudioNote", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void UploadAudioNoteFileAsync(VectorByte audioNoteFile) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UploadAudioNoteFileAsync(audioNoteFile, null);
    }
    
    public void UploadAudioNoteFileAsync(final VectorByte audioNoteFile,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UploadAudioNoteFile(audioNoteFile, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UploadAudioNoteFile", result);
                }
            }
        }.execute();
    }
    
    public void UploadAudioNoteFile(VectorByte audioNoteFile){
        UploadAudioNoteFile(audioNoteFile, null);
    }
    
    public void UploadAudioNoteFile(VectorByte audioNoteFile,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UploadAudioNoteFile");
        soapReq.addProperty("audioNoteFile",audioNoteFile.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UploadAudioNoteFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UploadAudioNoteFile", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void UpLoadAudioNoteTranslationAsync(String audioNoteTranslationJson) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpLoadAudioNoteTranslationAsync(audioNoteTranslationJson, null);
    }
    
    public void UpLoadAudioNoteTranslationAsync(final String audioNoteTranslationJson,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpLoadAudioNoteTranslation(audioNoteTranslationJson, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpLoadAudioNoteTranslation", result);
                }
            }
        }.execute();
    }
    
    public void UpLoadAudioNoteTranslation(String audioNoteTranslationJson){
        UpLoadAudioNoteTranslation(audioNoteTranslationJson, null);
    }
    
    public void UpLoadAudioNoteTranslation(String audioNoteTranslationJson,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpLoadAudioNoteTranslation");
        soapReq.addProperty("audioNoteTranslationJson",audioNoteTranslationJson);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UpLoadAudioNoteTranslation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UpLoadAudioNoteTranslation", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void UpLoadAudioNoteTranslationFileAsync(VectorByte audioNoteTranslationFile) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpLoadAudioNoteTranslationFileAsync(audioNoteTranslationFile, null);
    }
    
    public void UpLoadAudioNoteTranslationFileAsync(final VectorByte audioNoteTranslationFile,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpLoadAudioNoteTranslationFile(audioNoteTranslationFile, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpLoadAudioNoteTranslationFile", result);
                }
            }
        }.execute();
    }
    
    public void UpLoadAudioNoteTranslationFile(VectorByte audioNoteTranslationFile){
        UpLoadAudioNoteTranslationFile(audioNoteTranslationFile, null);
    }
    
    public void UpLoadAudioNoteTranslationFile(VectorByte audioNoteTranslationFile,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpLoadAudioNoteTranslationFile");
        soapReq.addProperty("audioNoteTranslationFile",audioNoteTranslationFile.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UpLoadAudioNoteTranslationFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/UpLoadAudioNoteTranslationFile", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void DownloadAllAudioNotesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DownloadAllAudioNotesAsync(null);
    }
    
    public void DownloadAllAudioNotesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return DownloadAllAudioNotes(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DownloadAllAudioNotes", result);
                }
            }
        }.execute();
    }
    
    public String DownloadAllAudioNotes(){
        return DownloadAllAudioNotes(null);
    }
    
    public String DownloadAllAudioNotes(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DownloadAllAudioNotes");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAllAudioNotes", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAllAudioNotes", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void DownloadAudioNoteFileAsync(String audioNoteFileName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DownloadAudioNoteFileAsync(audioNoteFileName, null);
    }
    
    public void DownloadAudioNoteFileAsync(final String audioNoteFileName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return DownloadAudioNoteFile(audioNoteFileName, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DownloadAudioNoteFile", result);
                }
            }
        }.execute();
    }
    
    public VectorByte DownloadAudioNoteFile(String audioNoteFileName){
        return DownloadAudioNoteFile(audioNoteFileName, null);
    }
    
    public VectorByte DownloadAudioNoteFile(String audioNoteFileName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DownloadAudioNoteFile");
        soapReq.addProperty("audioNoteFileName",audioNoteFileName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteFile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DownloadAudioNoteTranslationsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DownloadAudioNoteTranslationsAsync(null);
    }
    
    public void DownloadAudioNoteTranslationsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return DownloadAudioNoteTranslations(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DownloadAudioNoteTranslations", result);
                }
            }
        }.execute();
    }
    
    public String DownloadAudioNoteTranslations(){
        return DownloadAudioNoteTranslations(null);
    }
    
    public String DownloadAudioNoteTranslations(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DownloadAudioNoteTranslations");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteTranslations", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteTranslations", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void DownloadAudioNoteTranslationFromVoiceNoteAsync(int id,boolean idSpecified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DownloadAudioNoteTranslationFromVoiceNoteAsync(id, idSpecified, null);
    }
    
    public void DownloadAudioNoteTranslationFromVoiceNoteAsync(final int id,final boolean idSpecified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return DownloadAudioNoteTranslationFromVoiceNote(id, idSpecified, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DownloadAudioNoteTranslationFromVoiceNote", result);
                }
            }
        }.execute();
    }
    
    public String DownloadAudioNoteTranslationFromVoiceNote(int id,boolean idSpecified){
        return DownloadAudioNoteTranslationFromVoiceNote(id, idSpecified, null);
    }
    
    public String DownloadAudioNoteTranslationFromVoiceNote(int id,boolean idSpecified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DownloadAudioNoteTranslationFromVoiceNote");
        soapReq.addProperty("id",id);
        soapReq.addProperty("idSpecified",idSpecified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteTranslationFromVoiceNote", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteTranslationFromVoiceNote", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void DownloadAudioNoteTranslationFileAsync(String audioNoteTranslationFileName) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DownloadAudioNoteTranslationFileAsync(audioNoteTranslationFileName, null);
    }
    
    public void DownloadAudioNoteTranslationFileAsync(final String audioNoteTranslationFileName,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorByte>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorByte doInBackground(Void... params) {
                return DownloadAudioNoteTranslationFile(audioNoteTranslationFileName, headers);
            }
            @Override
            protected void onPostExecute(VectorByte result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DownloadAudioNoteTranslationFile", result);
                }
            }
        }.execute();
    }
    
    public VectorByte DownloadAudioNoteTranslationFile(String audioNoteTranslationFileName){
        return DownloadAudioNoteTranslationFile(audioNoteTranslationFileName, null);
    }
    
    public VectorByte DownloadAudioNoteTranslationFile(String audioNoteTranslationFileName,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DownloadAudioNoteTranslationFile");
        soapReq.addProperty("audioNoteTranslationFileName",audioNoteTranslationFileName);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteTranslationFile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAudioNoteTranslationFile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapPrimitive j = (SoapPrimitive)obj;
                    VectorByte resultVariable = new VectorByte(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DownloadAllLanguagesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DownloadAllLanguagesAsync(null);
    }
    
    public void DownloadAllLanguagesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return DownloadAllLanguages(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DownloadAllLanguages", result);
                }
            }
        }.execute();
    }
    
    public String DownloadAllLanguages(){
        return DownloadAllLanguages(null);
    }
    
    public String DownloadAllLanguages(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DownloadAllLanguages");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAllLanguages", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/IVoiceProcessingService/DownloadAllLanguages", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
}
